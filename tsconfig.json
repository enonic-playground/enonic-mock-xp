{ // https://www.typescriptlang.org/tsconfig
	"compilerOptions": {
		"allowJs": false,

		// Sets a base directory from which to resolve bare specifier module names.
		// This resolution has higher priority than lookups from node_modules.
		// This feature was designed for use in conjunction with AMD module
		// loaders in the browser, and is not recommended in any other context.
		// As of TypeScript 4.1, baseUrl is no longer required to be set when
		// using paths.
		"baseUrl": ".",

		"declaration": true,
		"declarationMap": false,
		"downlevelIteration": true,
		"esModuleInterop": true, // Needed by intersect
		"importHelpers": true,
		"inlineSourceMap": false,
		"inlineSources": false,
		"listEmittedFiles": false,
		"listFiles": false,
		"module": "commonjs",
		"moduleResolution": "node",

		"noEmitOnError": true,
		"noErrorTruncation": true,

		// @enonic/js-util currently has 2 errors when noImplicitAny is true
		// "noImplicitAny": true,
		"noImplicitAny": false,

		"noPropertyAccessFromIndexSignature": true,

		// @enonic/js-util currently has 3 errors when noUncheckedIndexedAccess is true
		// "noUncheckedIndexedAccess": true,
		"noUncheckedIndexedAccess": false,

		"noUnusedLocals": true,
		"noUnusedParameters": true,

		"outDir": "dist/",

		// A series of entries which re-map imports to lookup locations relative
		// to the baseUrl if set, or to the tsconfig file itself otherwise.
		"paths": {
			// This is needed because @enonic/js-utils currently imports types
			// from /lib/xp/* rather than @enonic-types/lib-*
			"/lib/xp/*": ["node_modules/@enonic-types/lib-*"],
		},

		"removeComments": true,
		"resolveJsonModule": true,
		"rootDir": "src",
		"rootDirs": [
			"src",
			"node_modules",
			"test"
		],
		"sourceMap": false,

		// Skip type checking of declaration files.
		// This can save time during compilation at the expense of type-system
		// accuracy. For example, two libraries could define two copies of the
		// same type in an inconsistent way. Rather than doing a full check of
		// all d.ts files, TypeScript will type check the code you specifically
		// refer to in your app’s source code.
		// A common case where you might think to use skipLibCheck is when there
		// are two copies of a library’s types in your node_modules. In these
		// cases, you should consider using a feature like yarn’s resolutions to
		// ensure there is only one copy of that dependency in your tree or
		// investigate how to ensure there is only one copy by understanding the
		// dependency resolution to fix the issue without additional tooling.
		// Another possibility is when you are migrating between TypeScript
		// releases and the changes cause breakages in node_modules and the JS
		// standard libraries which you do not want to deal with during the
		// TypeScript update.
		// Note, that if these issues come from the TypeScript standard library
		// you can replace the library using TypeScript 4.5’s lib replacement
		// technique.
		"skipLibCheck": true,

		"strict": true,
		"strictFunctionTypes": true,

		// @enonic/js-util currently has 3 errors when strictNullChecks is true
		// "strictNullChecks": true,
		"strictNullChecks": false,

		"target": "ES5",

		// By default all visible ”@types” packages are included in your
		// compilation. Packages in node_modules/@types of any enclosing folder
		// are considered visible. For example, that means packages within
		// ./node_modules/@types/, ../node_modules/@types/,
		// ../../node_modules/@types/, and so on.
		// If types is specified, only packages listed will be included in the
		// global scope.
		// This feature differs from typeRoots in that it is about specifying
		// only the exact types you want included, whereas typeRoots supports
		// saying you want particular folders.
		"types": [
			"node"
		],

		// "verbatimModuleSyntax": true
	},

	// Specifies an allowlist of files to include in the program. An error
	// occurs if any of the files can’t be found.
	// This is useful when you only have a small number of files and don’t need
	// to use a glob to reference many files. If you need that then use include.
	"files": [
		"src/index.ts"
	],

	// Specifies an array of filenames or patterns to include in the program.
	// These filenames are resolved relative to the directory containing the
	// tsconfig.json file.
	"include": [
		"src/**/*.ts"
	],

	// Specifies an array of filenames or patterns that should be skipped when
	// resolving include.
	// Important: exclude only changes which files are included as a result of
	// the include setting. A file specified by exclude can still become part of
	// your codebase due to an import statement in your code, a types inclusion,
	// a /// <reference directive, or being specified in the files list.
	// It is not a mechanism that prevents a file from being included in the
	// codebase - it simply changes what the include setting finds.
	"exclude": [
		"node_modules"
	],
}
